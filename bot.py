"""
Telegram –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –∏–∑ URL-—Å—Å—ã–ª–æ–∫
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç QR-–∫–æ–¥—ã –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö SVG –∏ PNG
"""

import io
import re
import logging
from urllib.parse import urlparse

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
import qrcode
import qrcode.image.svg

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è)
import os
BOT_TOKEN = os.getenv("BOT_TOKEN", "6160411169:AAH9vy489abOPhimUXugV-uhemaRRs6Tcjo")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


def is_valid_url(url: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤–∞–ª–∏–¥–Ω—ã–º URL —Å http/https –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
    """
    try:
        result = urlparse(url)
        return all([result.scheme in ('http', 'https'), result.netloc])
    except Exception:
        return False


def extract_single_url(text: str) -> str | None:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑ —Ç–µ–∫—Å—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
    - –¢–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–æ–≤–Ω–æ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É
    - –°—Å—ã–ª–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
    """
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ URL
    url_pattern = r'https?://[^\s]+'
    urls = re.findall(url_pattern, text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–π–¥–µ–Ω–∞ —Ä–æ–≤–Ω–æ –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞
    if len(urls) != 1:
        return None
    
    url = urls[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏ (—Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–æ–±–µ–ª–∞–º–∏)
    if text.strip() != url:
        return None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å URL
    if not is_valid_url(url):
        return None
    
    return url


def generate_qr_svg(url: str) -> bytes:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SVG
    """
    factory = qrcode.image.svg.SvgPathImage
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_L,
        box_size=10,
        border=4,
        image_factory=factory
    )
    qr.add_data(url)
    qr.make(fit=True)
    
    # –°–æ–∑–¥–∞–µ–º SVG –≤ –ø–∞–º—è—Ç–∏
    img = qr.make_image(fill_color="black", back_color="white")
    svg_buffer = io.BytesIO()
    img.save(svg_buffer)
    svg_buffer.seek(0)
    
    return svg_buffer.read()


def generate_qr_png(url: str) -> bytes:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QR-–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    """
    qr = qrcode.QRCode(
        version=1,
        error_correction=qrcode.constants.ERROR_CORRECT_H,
        box_size=20,  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        border=4,
    )
    qr.add_data(url)
    qr.make(fit=True)
    
    # –°–æ–∑–¥–∞–µ–º PNG –≤ –ø–∞–º—è—Ç–∏
    img = qr.make_image(fill_color="black", back_color="white")
    png_buffer = io.BytesIO()
    img.save(png_buffer, format='PNG', dpi=(300, 300))
    png_buffer.seek(0)
    
    return png_buffer.read()


def sanitize_filename(url: str) -> str:
    """
    –°–æ–∑–¥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
    """
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª
    name = re.sub(r'^https?://', '', url)
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    name = re.sub(r'[^\w\-.]', '_', name)
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    if len(name) > 50:
        name = name[:50]
    return name


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤.\n\n"
        "üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –æ–¥–Ω—É —Å—Å—ã–ª–∫—É (–Ω–∞—á–∏–Ω–∞—é—â—É—é—Å—è —Å http:// –∏–ª–∏ https://), "
        "–∏ —è —Å–æ–∑–¥–∞–º –¥–ª—è –≤–∞—Å QR-–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–∞—Ö SVG –∏ PNG.\n\n"
        "‚úÖ –ü—Ä–∏–º–µ—Ä: https://example.com"
    )


@dp.message()
async def handle_message(message: types.Message):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = extract_single_url(message.text)
        
        if not url:
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω—É –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É "
                "(–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å http:// –∏–ª–∏ https://)."
            )
            return
        
        # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        status_msg = await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é QR-–∫–æ–¥—ã...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR-–∫–æ–¥—ã
        try:
            svg_data = generate_qr_svg(url)
            png_data = generate_qr_png(url)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")
            await status_msg.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        base_filename = sanitize_filename(url)
        svg_filename = f"{base_filename}_qr-code.svg"
        png_filename = f"{base_filename}_qr-code.png"
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        svg_file = BufferedInputFile(svg_data, filename=svg_filename)
        png_file = BufferedInputFile(png_data, filename=png_filename)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
        await message.answer_document(
            svg_file,
            caption=f"üìä QR-–∫–æ–¥ –¥–ª—è: {url}"
        )
        await message.answer_document(png_file)
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await status_msg.delete()
        
        logger.info(f"QR-–∫–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è URL: {url}")
        
    except Exception as e:
        logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –±—ã–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
        await bot.delete_webhook(drop_pending_updates=True)
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
    finally:
        await bot.session.close()


if __name__ == "__main__":
    import asyncio
    asyncio.run(main())